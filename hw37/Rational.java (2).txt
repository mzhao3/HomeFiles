// Maggie Zhao
// APCS1 pd02
// HW37-- Be More Rational
// 2017-11-20 M
public class Rational{

    // instance variables for the numerator and denominator
    private int numerator;
    private int denominator;

Phase IIâ€¦ 
     //Returns the gcd of the numerator and denominator of this Rational
    public static int gcdER (int a, int b) {
	//From the day Jackie and Victor presented their code for the class
	if (b==0) {
	    return a;
	}
	return gcdER(b, a % b);
    }

    //Takes 1 Rational object (just like multiply) and adds it to the current rational number object. Need not reduce.
    public void add (Rational m) {
	int lcm = lcm( denominator, m.denominator);
	int ratio1 = lcm / denominator;
	int ratio2 = lcm / m.denominator;
	    
	numerator = (this.numerator * ratio1) + (m.numerator * ratio2);
	denominator = lcm;
    }

    //Works the same as add, except the operation is subtraction
    public void subtract (Rational m) {
	int lcm = lcm( denominator, m.denominator);
        int ratio1 = lcm / denominator;
        int ratio2 = lcm / m.denominator;

        numerator = (this.numerator * ratio1) - (m.numerator * ratio2);
        denominator = lcm;
    }

    public int gcd(){
	return gcdER(numerator, denominator); 
    }
    public int lcm(int a, int b){
	if (a==b) {
	    return a;
	}
	else
	    return (a*b) / gcdER(a,b);
    }
    //Changes this Rational to one in reduced form (should use gcd)
    public void reduce(){
	int gcd = this.gcd();
	int newNum = numerator/gcd;
	int newDenom = denominator/gcd;
	numerator = newNum;
	denominator = newDenom;
    }

    //Takes a Rational parameter and compares it to the calling object
    public int compareTo(Rational m){
	//Returns 0 if the two numbers are equal
	if (this.floatValue() == m.floatValue()) {
	    return 0;
	}
	//Returns a positive integer if the calling number is larger than the parameter
	if (this.floatValue() > m.floatValue()){
	    return 1;
	}
	//Returns a negative integer if the calling number is smaller than the parameter
	else {
	    return -1;
	}
	
    }
    
    public static void main(String [] args) {
	System.out.println("Making Rational objects...");
	Rational r = new Rational (2,3); //Stores rational number 2/3
	Rational s = new Rational(1,2); //Stores rational number 1/2
	Rational t = new Rational (5, 0); //Stores rational number 0/1
	Rational u = new Rational (8, 5); //Stores rational number 8/5
		
	System.out.println("Now testing add()...");
        System.out.println("=====================================");

	System.out.print(r + " + " + s + " = " ); // 2/3 + 1/2 = 7/6
	r.add(s);
	System.out.print(r + "\n");
	System.out.print(s + " + " + t + " = " ); // 1/2 + 0/1 = 1/2
        s.add(t);
        System.out.print(s + "\n");
	System.out.println("=====================================\n");

	System.out.println("Now testing subtract()...");
	System.out.println("=====================================");
	System.out.print(t + " - " + u + " = "); // 0/1 - 8/5 = -8/5 
	t.subtract(u);
	System.out.print(t + "\n");
	System.out.print(u + " - " + r + " = "); // 8/5 - 7/6 = 13/30 
	u.subtract(r);
       System.out.print(u + "\n")
	System.out.println("=====================================\n");

	System.out.println("Now testing reduce()...");
        System.out.println("=====================================");
	System.out.print(r + " is reduced to ");
	r.reduce();
	System.out.println(r); // 7/6
	System.out.print(s + " is reduced to ");
	s.reduce();
        System.out.println(s); // 1/2
	System.out.print(t + " is reduced to ");
	t.reduce();
	System.out.println(t); // 8/-5
	System.out.print(u + " is reduced to ");
	u.reduce();
	System.out.println(u); // 13/30
	Rational v = new Rational (-10, 5);
	System.out.print(v + " is reduced to ");
        v.reduce();
        System.out.println(v); // -2/1
	System.out.println("=====================================\n");
	
	System.out.println("Now testing compareTo()...");
        System.out.println("=====================================");
	System.out.println(r +" vs. "+ s + " => " + r.compareTo(s)); //1
	System.out.println(s +" vs. "+ t + " => " + s.compareTo(t)); //1
	System.out.println(t +" vs. "+ u + " => " + t.compareTo(u)); //-1
	System.out.println(u +" vs. "+ r + " => " + u.compareTo(r)); //-1
	System.out.println("=====================================\n");
    }
}// end Rational

